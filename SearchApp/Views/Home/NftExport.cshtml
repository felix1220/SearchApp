
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>NftExport</title>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <style>
        .controlPanel {
            background: white;
            padding-left: 0;
            padding-right: 0;
            -webkit-box-shadow: 4px 4px 8px rgba(0,0,0,0.5);
            -moz-box-shadow: 4px 4px 8px rgba(0,0,0,0.5);
            box-shadow: 4px 4px 8px rgba(0,0,0,0.5);
        }

    </style>
</head>
<body>
    <div>
        <span>
            <b>Select Scene:</b>
            <select id="ddlSelectScene">
                <option value="">--Select Scene--</option>
            </select>
        </span>&nbsp;
        <span>
            <button id="btnSavePng">Save PNG</button>
        </span>
       
    </div>
    <div>
        <a id="link"></a>
    </div>
    <div>
        <canvas id="canvas" width="2000" height="1200" class="controlPanel"> </canvas>


    </div>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext("2d");
        let mapped = {};
        let scenesCollection = [];
        const savePngImage = () => {
            var link = document.getElementById('link');
            link.setAttribute('download', 'Olympics.png');
            link.setAttribute('href', canvas.toDataURL("image/png").replace("image/png", "image/octet-stream"));
            link.click();
        }
        const loadSceneDDL = (data) => {
             let selectScene = $('#ddlSelectScene');
                    data.forEach(s => {
                        selectScene.append($('<option></option>').val(s).html(s));
                    });
        }
        const loadData = (data) => {
            scenesCollection = [];
            scenesCollection.push({
                type: 'puzzleData',
                data: data
            });
        }
        const loadLettersCanvas = (data, moveDown = 0) => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.save();
           
            data.AllLetters.forEach((rect) => {
                if (rect.IsVisible) {
                    /*let strRgb = `rgba(${rect.BackgroundRed},${rect.BackgroundGreen},${rect.BackgroundBlue},1.0)`;

                    ctx.fillStyle = strRgb;
                    let newY = rect.Position.y - data.Plan.Font;
                    const width = data.Plan.Font;
                    const height = data.Plan.Font;
                    ctx.fillRect(rect.Position.x, newY, width, height);*/

                    // ctx.stroke();

                    if (rect.Outline) {
                        // console.log(rect.letter, i);
                        let block = data.Plan.Font + data.Plan.Spacing;
                        ctx.rect(rect.Position.x, rect.Position.y - block, width, height);
                    }

                    strRgb = `rgba(${rect.Red},${rect.Green},${rect.Blue},1.0)`;
                    ctx.font = data.Plan.Style;
                    ctx.fillStyle = strRgb;
                    ctx.fillText(rect.Letter, rect.Position.x, rect.Position.y + moveDown);
                    ctx.stroke();
                    // console.log(strRgb);
                }
            });
            ctx.restore();
        }
        const ringWords = (words, plan) => {
            const columns = words.length / 10;
            console.log('number of columns => ', columns, words.length);
            ctx.beginPath();
            ctx.save();
            ctx.font = plan.Style;
            let startX = 450;
            let startY = 40;
            let colI = 0;
            //debugger;
            for (let i = 0; i < Math.ceil(columns); i++) {
                startY = 20;
                for (let x = colI; x < colI + 10; x++) {
                    if (words[x]) {
                        ctx.fillText(words[x].Word, startX, startY);
                        startY += 20;
                        ctx.stroke();
                    }
                }
                colI += 10;
                startX += 140;
            }
            ctx.restore();
        }
        const processMap = (data) => {
            const pixels = data.split(' ');
            const colorGroup = [];
            const posGroup = [];
            const letterGroup = [];
            // debugger;
            pixels.forEach(p => {
                // debugger;
                const parts = p.split(':');
                if (parts[1]) {
                    const positionsArr = parts[1].split(',');
                    const colorsArr = parts[2].split(',');
                    const newPositions = processPositions(positionsArr, parts[0]);
                    const newColors = processColors(colorsArr);
                    posGroup.push(newPositions);
                    colorGroup.push(newColors);
                    letterGroup.push(parts[0]);
                }

            });
            // const result = groupSections(posGroup);
            // console.log('The sections => ', result);
            mapped = {
                positions: posGroup,
                colors: colorGroup,
                letters: letterGroup
            };

        }
        $('#btnSavePng').click(function () {
            savePngImage();
        });
        $('#ddlSelectScene').on('change', () => {
            if ($('#ddlSelectScene').val() === '') {
                return;
            }
            console.log('the puzzle scene => ', $('#ddlSelectScene').val());
            const url = 'http://localhost:5233/Data/GetLoadedSceneJson/?fileName=' +  $('#ddlSelectScene').val();
            const fetchScenes = fetch(url);
            fetchScenes.then(response => {
                return response.json();
            }).then(data => {
                console.log('Load scene data => ', data);
                const pUrl = 'http://localhost:5233/Data/GetSceneDataObj/?name=' + data.PuzzleName.replace('#', ':');
                const fetchData = fetch(pUrl);
                fetchData.then(response => {
                    return response.json();
                }).then(result => {
                    loadData(result);
                    loadLettersCanvas(result, 200);
                    if (data.SceneName === 'ring-wip') {
                        ringWords(data.Words, result.Plan);
                    }
                });

            });

        });

        /*const url = 'http://localhost:5233/Data/GetSinglePuzzle/?puzzleName=' + 'peace-rings-color';
        const fetchScenes = fetch(url);
        fetchScenes.then(response => {
            return response.json();
        }).then(data => {
            loadData(data);
            loadLettersCanvas(data);
            
        });*/
        const scenesUrl = 'http://localhost:5233/Data/GetSavedPuzzles';
         const fetchScenes = fetch(scenesUrl);
        fetchScenes.then(response => {
            return response.json();
        }).then(data => {

            loadSceneDDL(data);
        });

    </script>
</body>
</html>


@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>PastMap</title>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.core.min.js"></script>
</head>
<body>
    <div style="width:50%;float:left">
        <canvas id="canvas" width="500" height="500" class="controlPanel"> </canvas>
    </div>
    <div style="width:30%;float:right">
        <div>
            <div>
                <span>
                    <b>Select Scene:</b>
                    <select id="ddlSelectScene">
                        <option value="">--Select Scene--</option>
                    </select>
                </span>&nbsp;
            </div><br />
            <div>
                <div>
                    <input type="radio" id="overlap" name="options" value="overlap">
                    <label for="male">Overlap</label><br>
                    <input type="radio" id="nooverlap" name="options" value="nooverlap">
                    <label for="female">No Overlap</label><br>
                    <input type="radio" id="any" name="options" value="any">
                    <label for="other">Any</label>
                </div>
            </div><br />
            <div>
                <div>
                    <textarea id="txtWords" rows="10" cols="30"></textarea>
                </div>
            </div><br />
            <div id="listResults">

            </div>
        </div>
    </div>
    <script>
        let scenesCollection = [];
        let wordsCollection = [];
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext("2d");
        const collision = (data, word, myWord) => {

            const letterIds = word.Positions.map(p => {
                const item = data.find(d => d.Position.x === p.x && d.Position.y === p.y);
                return item.ID;
            });

            const filteredArray = letterIds.filter(value => myWord.includes(value));
            return filteredArray && filteredArray.length;

            return false;
        }
        const algoAlign = (data, words) => {
            const val = $('input[name="options"]:checked').val();
            const wordsArr = $('#txtWords').val().toLocaleUpperCase().split('\n');

            if (val === 'any') {
                const pickIndex = Math.floor((Math.random() * data.AllLetters.length - 1));
                //get which direction
                const dir = Math.floor((Math.random() * data.AllLetters.length - 1));
                if (!collision(data, words, pickIndex)) {

                }

            }
        }
        const loadLettersCanvas = (data) => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.save();
            data.AllLetters.forEach((rect) => {
                if (rect.IsVisible) {
                    let strRgb = `rgba(${rect.BackgroundRed},${rect.BackgroundGreen},${rect.BackgroundBlue},1.0)`;

                    ctx.fillStyle = strRgb;
                    let newY = rect.Position.y - data.Plan.Font;
                    const width = data.Plan.Font;
                    const height = data.Plan.Font;
                    ctx.fillRect(rect.Position.x, newY, width, height);
                    // ctx.stroke();

                    if (rect.Outline) {
                        // console.log(rect.letter, i);
                        let block = data.Plan.Font + data.Plan.Spacing;
                        ctx.rect(rect.Position.x, rect.Position.y - block, width, height);
                    }

                    strRgb = `rgba(${rect.Red},${rect.Green},${rect.Blue},1.0)`;
                    ctx.font = data.Plan.Style;
                    ctx.fillStyle = strRgb;
                    ctx.fillText(rect.Letter, rect.Position.x, rect.Position.y);
                    ctx.stroke();
                    // console.log(strRgb);
                }
            });
            // highlightWords();
            ctx.restore();
        }

        $('#ddlSelectScene').on('change', () => {
            if ($('#ddlSelectScene').val() === '') {
                return;
            }
            var url = 'http://localhost:5233/Data/GetLoadedSceneJson/?fileName=' + $('#ddlSelectScene').val();
            wordsCollection = [];
            loadSceneData(url, 'sceneData', loadTxtComponent('txtPuzzleName'));
        });
        const buildIds = (myWord, startingId, dir) => {
            const collectedIds = [];
            Array.prototype.forEach.call(myWord, (l, index) => {
                if (dir === 2) {
                    startingId += mod + 1;

                } else if (dir === 0) {
                    startingId -= 1;
                } else if (dir === 1) {
                    startIndex += mod;
                } else if (dir === 2) {
                    startIndex += mod + 1;
                } else if (dir === 3) {
                    startIndex += mod + 2;
                }
                collectedIds.push(startingId);             
            });
            return collectedIds;
        }
        const test = (data, mod, myWord, words) => {
            // debugger;
            let randPos = 828;
            const randDir = 2;
            let allIds = [];
            allIds.push(randPos);
            const pos = data[randPos].Position;
            if (randDir === 2) {
                for (let i = 0; i < myWord.length; i++) {
                    randPos = randPos + mod + 1;
                    allIds.push(randPos)
                }
            }
            let collectedIds = [];
            let doubleCollision = false;
            words.forEach(w => {
                debugger;
                allIds = collectedIds.length ? collectedIds : allIds
                if (collision(data, w, allIds)) {
                    if (collectedIds.length) {
                        doubleCollision = true;
                        return;
                    }
                    const lowerCaseWord = w.Word.toLocaleLowerCase();
                    //const letterInCommon = lowerCaseWord.filter(value => myWord.includes(value));
                    let letterInCommon = '';
                    for (let i = 0; i < lowerCaseWord.length; i++) {
                        if (myWord.indexOf(lowerCaseWord[i]) > -1) {
                            letterInCommon = lowerCaseWord[i];
                            break;
                        }
                    }
                    if (letterInCommon) {
                        const existingIndex = w.Word.findIndex(f => f === letterInCommon.toLocaleUpperCase());
                        const newIndex = myWord.findIndex(f => f === letterInCommon);
                        let startIndex = newIndex - 0;
                        const letterIds = word.Positions.map(p => {
                            const item = data.find(d => d.Position.x === p.x && d.Position.y === p.y);
                            return item.ID;
                        });

                        let startingId = letterIds[existingIndex];
                        if (randDir == 2) {
                            if (startIndex > 0) {
                                let iter = 0;
                                while (iter < startIndex) {
                                    startingId -= mod + 1;
                                    iter++;
                                }
                            } 
                        }

                        collectedIds = buildIds(myWord, startingId, randDir);
                    }
                } else {
                    collectedIds = buildIds(myWord, randPos, randDir);
                }
            });
            //translate to text to paste on other screen
            if (doubleCollision) {
                console.log(myWord, ' could not be placed!');
            } else {
                const str = 'ID===' + collectedIds[0] + ':WD=' + myWord + ',D=' + randDir;
                appenDom(str);
            }
        }
        const appendDom = (strRow) => {
            $('#listResult').empty();
            const $spanContainer = $('<span style="margin-left:5px;" />');
            $spanContainer.append(strRow);
            $('#listResult').append($spanContainer);
        }
        const wordSpec = (words) => {
            words.forEach(word => {
                let accrue = '';
                word.Positions.forEach((p, i) => {
                    if (i + 1 < word.Positions.length) {
                        accrue = accrue + (p.x - word.Positions[i + 1].x) + ',' + (p.y - word.Positions[i + 1].y) + ' ';
                    }
                });
                console.log('Word Obj => ', word.Word, word.Direction, accrue);
            });
        }
        const wrapperReloadScene = (sceneData) => {
            return (puzzleData) => {
                loadLettersCanvas(puzzleData);
                test(puzzleData.AllLetters, +sceneData.Mod, 'ring', sceneData.Words);
                // wordSpec(sceneData.Words);
                // addWordsDom();
                // highlightWords();
            }

        }
        const loadTxtComponent = (uiId) => {
            return (serverData) => {
                $('#' + uiId).val(serverData.SceneName);

                sceneModel = serverData;
                const justPuzzleName = serverData.PuzzleName.split('#')[1];
                const puzzleUrl = 'http://localhost:5233/Data/GetLoadedScenePuzzle/?scenePuzzleName=' + serverData.SceneName + '&puzzleName=' + justPuzzleName;
                loadSceneData(puzzleUrl, 'puzzleData', wrapperReloadScene(serverData));

            }
        }
        const loadDDLComponent = (uiId) => {
            return (serverData) => {
                let selectScene = $('#' + uiId);
                serverData.forEach(s => {
                    selectScene.append($('<option></option>').val(s).html(s));
                });

            }

        }
        const loadSceneData = (endPt, typeId, callBackFunc) => {
            const fetchScenes = fetch(endPt);
            fetchScenes.then(response => {
                return response.json();
            }).then(data => {
                if (typeId) {
                    if (scenesCollection.length > 0) {
                        scenesCollection[0] = {
                            type: typeId,
                            data: data
                        }
                    } else {

                        scenesCollection.push({
                            type: typeId,
                            data: data
                        });

                    }
                }

                if (callBackFunc) {
                    callBackFunc(data);
                }


            });

        }
        loadSceneData('http://localhost:5233/Data/GetSavedPuzzles', 'scenes', loadDDLComponent('ddlSelectScene'));
    </script>
</body>
</html>